//
//  main.cpp
//  Heap
//
//  Created by 焦媛 on 2017/2/23.
//  Copyright © 2017年 焦媛. All rights reserved.
//

#include <iostream>
using namespace std;



void swap(int &i, int &j){
    int tmp ;
    tmp = i;
    i = j;
    j = tmp;
}


//最大堆  堆数组由小变大
//调整堆

void HeapAdjust_Max(int *a,int i,int size)  //调整堆
{
    int lchild=2*i;       //i的左孩子节点序号
    int rchild=2*i+1;     //i的右孩子节点序号
    int max=i;            //临时变量
    if(i<=size/2)          //如果i不是叶节点就不用进行调整
    {
        if(lchild<=size&&a[lchild]>a[max])
        {
            max=lchild;
        }
        if(rchild<=size&&a[rchild]>a[max])
        {
            max=rchild;
        }
        if(max!=i)
        {
            swap(a[i],a[max]);
            HeapAdjust_Max(a,max,size);    //避免调整之后以max为父节点的子树不是堆
        }
    }
}

//建立堆  堆数组从下标1开始
/**
 * 建立堆  堆数组从下标1开始
 **/
void BuildHeap_Max(int *a,int size)
{
    int i;
    for(i=size/2;i>=1;i--)    //非叶节点最大序号值为size/2
    {
        HeapAdjust_Max(a,i,size);
    }
}

//堆排序
/**
 * 堆排序
 **/
void HeapSort_Max(int *a,int size)
{
    int i;
    BuildHeap_Max(a,size);     //先建立堆
    for(i=size;i>=1;i--)
    {
        swap(a[1],a[i]);           //交换堆顶和最后一个元素，即每次将剩余元素中的最大者放到最后面
        HeapAdjust_Max(a,1,i-1);      //重新调整堆顶节点成为大顶堆
    }
}

//最小堆  堆数组由大变小
//调整堆
void HeapAdjust_Min(int *a,int i,int size)  //调整堆
{
    int lchild=2*i;       //i的左孩子节点序号
    int rchild=2*i+1;     //i的右孩子节点序号
    int min=i;            //临时变量
    if(i<=size/2)          //如果i不是叶节点就不用进行调整
    {
        if(lchild<=size&&a[lchild]<a[min])
        {
            min=lchild;
        }
        if(rchild<=size&&a[rchild]<a[min])
        {
            min=rchild;
        }
        if(min!=i)
        {
            swap(a[i],a[min]);
            HeapAdjust_Min(a,min,size);    //避免调整之后以max为父节点的子树不是堆
        }
    }
}

//建立堆  堆数组从下标1开始
void BuildHeap_Min(int *a,int size)
{
    int i;
    for(i=size/2;i>=1;i--)    //非叶节点最大序号值为size/2
    {
        HeapAdjust_Min(a,i,size);
    }
}

//堆排序
void HeapSort_Min(int *a,int size)
{
    int i;
    BuildHeap_Min(a,size);
    for(i=size;i>=1;i--)
    {
        swap(a[1],a[i]);           //交换堆顶和最后一个元素，即每次将剩余元素中的最大者放到最后面
        HeapAdjust_Min(a,1,i-1);      //重新调整堆顶节点成为大顶堆
    }
}






int main(int argc, const char * argv[]) {
    // insert code here...
    
    int a[100];
    int b[100];
    int size;
    while(scanf("%d",&size)==1&&size>0)
    {
        int i;
        for(i=1;i<=size;i++)
            cin>>a[i];
        for(i=1;i<=size;i++)
            b[i] = a[i];
        printf("%p\n",&a);
        printf("%p\n",&b);
        std::cout << "最大堆:";
        HeapSort_Max(a,size);
        for(i=1;i<=size;i++)
            cout<<a[i]<<" ";
        std::cout << "\n最小堆:";
        HeapSort_Min(b,size);
        for(i=1;i<=size;i++)
            cout<<b[i]<<" ";

        cout<<endl;
    }
    
    return 0;
}
